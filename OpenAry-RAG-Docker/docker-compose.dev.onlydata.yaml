#version: '3.8'

services:


  opds-embedding:
    image: hongjoong/opds-embedding:0.0.1
    container_name: opds-embedding
    volumes:
      - ./config/svc-set.dev.yaml:/config/svc-set.yaml
      - /usr/share/zoneinfo/Asia/Seoul:/etc/localtime:ro
    restart: always
    depends_on:
      - redis-stack
    networks:
      - openary_network

  opds-preprocess:
    image: hongjoong/opds-preprocess:0.0.1
    container_name: opds-preprocess
    volumes:
      - ./config/svc-set.dev.yaml:/config/svc-set.yaml
      - /usr/share/zoneinfo/Asia/Seoul:/etc/localtime:ro
    restart: always
    depends_on:
      - redis-stack
    networks:
      - openary_network

  opds-summary:
    image: hongjoong/opds-summary:0.0.1
    container_name: opds-summary
    volumes:
      - ./config/svc-set.dev.yaml:/config/svc-set.yaml
      - /usr/share/zoneinfo/Asia/Seoul:/etc/localtime:ro
    restart: always
    depends_on:
      - redis-stack
    networks:
      - openary_network
     
  opds-mgmt:
    image: hongjoong/opds-mgmt:0.0.1
    container_name: opds-mgmt
    ports:
      - "9001:9001"
    volumes:
      - ./config/svc-set.dev.yaml:/config/svc-set.yaml
      - /usr/share/zoneinfo/Asia/Seoul:/etc/localtime:ro
    restart: always
    depends_on:
      - redis-stack
    networks:
      - openary_network

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ./ollama:/root/.ollama
    restart: unless-stopped
    networks:
      - openary_network
    #GPU 사용시
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"    # AMQP protocol port
      - "15672:15672"  # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=genai
      - RABBITMQ_DEFAULT_PASS=openary
    volumes:
      - ./rabbitmq_data/data:/var/lib/rabbitmq
      - ./rabbitmq_data/log:/var/log/rabbitmq
    restart: unless-stopped
    networks:
      - openary_network

  redis-stack:
    image: redis/redis-stack-server:latest
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    restart: always
    depends_on:
      - mariadb
      - postgres
      - mongodb
      - minio
      - createbuckets
    networks:
      - openary_network

  mariadb:
    image: mariadb:latest
    container_name: mariadb
    environment:
      MYSQL_ROOT_PASSWORD: openary
      MYSQL_USER: genai
      MYSQL_PASSWORD: openary
      MYSQL_DATABASE: llm_dev
    ports:
      - "3306:3306"
    volumes:
      - ./mariadb_data:/var/lib/mysql
      - ./mariadb_init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - openary_network

  postgres:
    image: ankane/pgvector:latest
    container_name: pgvector
    environment:
      POSTGRES_USER: genai
      POSTGRES_PASSWORD: openary
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./pgvector_init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U genai"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - openary_network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: genai
      MONGO_INITDB_ROOT_PASSWORD: openary
      MONGO_INITDB_DATABASE: genai_svc_dev
    ports:
      - "27017:27017"
    volumes:
      - ./mongodb_data:/data/db
      - ./mongo_init/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    command: mongod --auth
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/genai_svc_dev --quiet
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - openary_network

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: genai_minio          # Access Key
      MINIO_ROOT_PASSWORD: openary_minio    # Secret Key
    command: server --console-address ":9001" /data
    ports:
      - "9010:9000"   # API port
      - "9011:9001"   # Console port
    volumes:
      - ./minio_data:/data
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - openary_network

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10 &&
      mc config host add myminio http://minio:9000 genaiuser genai123!@# &&
      mc mb --ignore-existing myminio/genai-bucket &&
      exit 0;
      "

networks:
  openary_network:
    driver: bridge